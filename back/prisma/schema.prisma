// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int     @id @default(autoincrement())
//   username String  @unique @db.VarChar(30)
//   password String  @db.VarChar(72)
//   email    String?
//   todos    Todo[]

//   @@map("users")
// }

model User {
  id        Int     @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  userName  String  @unique @db.VarChar(30)
  password  String  @db.VarChar(72)
  // Hotels    Hotels[]
  // Booking   Booking[]
  // Rooms     Rooms[]
  Todo      Todo[]

  @@map("users")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(150)
  status    Status   @default(PENDING)
  dueInt    DateTime @map("due_int") @db.Date
  dueOut    DateTime @map("due_out") @db.Date
  price     String   @map("price") @db.VarChar(15)
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("todos")
}

enum Status {
  PENDING
  DOING
  DONE
}

// model Booking {
//   id             Int      @id @default(autoincrement())
//   CheckInDate    DateTime @map("check_in_date") @db.Date
//   CheckOutDate   DateTime @map("check_out_date") @db.Date
//   NumRooms       String   @map("num_rooms") @db.VarChar(45)
//   PaymentDetails String

//   // users  User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   // userId Int  @map("user_id")

//   paymentId Int? @map("payment_id")

//   @@map("bookings")
// }

model Rooms {
  id      Int    @id @default(autoincrement())
  roomNum String @map("room_num")
  Price   String @map("price") @db.VarChar(15)
  // users   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId  Int

  @@map("rooms")
}

model Payment {
  id            Int     @id @default(autoincrement())
  paymentMethod String?
  paymentAmout  String

  bookingId Int? @map("booking_id")

  @@map("payments")
}
