// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String    @unique
  phone     String?
  userName  String    @unique
  password  String?
  Hotels    Hotels[]
  Booking   Booking[]
  Rooms     Rooms[]

  @@map("users")
}

model Hotels {
  id        Int       @id @default(autoincrement())
  hotelName String?
  rating    String
  price     String
  users     User      @relation(fields: [userId], references: [id])
  userId    Int
  Booking   Booking[]

  @@map("hotelss")
}

model Booking {
  id             Int      @id @default(autoincrement())
  CheckInDate    DateTime @default(now()) @map("check_in_date") @db.Timestamp(0)
  CheckOutDate   DateTime @default(now()) @map("check_out_date") @db.Timestamp(0)
  NumRooms       String
  PaymentDetails String
  viewBooking    String
  Modify         String
  users          User     @relation(fields: [userId], references: [id])
  userId         Int
  hotelss        Hotels   @relation(fields: [hotelsId], references: [id])
  hotelsId       Int

  paymentId Int? @map("payment_id")

  @@map("bookings")
}

enum Statusroom {
  emptyroom
  occupiedroom
}

model Rooms {
  id        Int        @id @default(autoincrement())
  romNumber String
  roomType  String
  Price     String
  status    Statusroom
  users     User       @relation(fields: [userId], references: [id])
  userId    Int

  @@map("rooms")
}

enum PayStatus {
  completed
  awaitingAction
}

model Payment {
  id            Int       @id @default(autoincrement())
  paymentMethod String?
  paymentAmout  String
  status        PayStatus

  bookingId Int? @map("booking_id")

  @@map("payments")
}
